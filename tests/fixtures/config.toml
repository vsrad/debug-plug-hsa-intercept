[logs]
# (Optional) Path to the agent log file ("-" to print to stdout),
# where configuration and runtime errors are reported.
agent-log = "-"
# (Optional) Path to the code object log file ("-" to print to stdout),
# where kernel and code objects loaded by the application are reported.
co-log = "tests/tmp/co_dump.log"
# (Optional) When the application loads a code object, dump it
# into the following directory:
co-dump-dir = "tests/tmp/code_objects"

# Auxiliary GPU buffers are allocated the first time
# the application creates an executable from a code object.
# Each buffer allocation begins with `[[buffer]]`.
#
# If you don't need to allocate any auxiliary buffers,
# don't specify any `[[buffer]]`s.
[[buffer]]
# (Required) Buffer size, in bytes
size = 1048576
# (Optional) When the application exits, save the contents
# of the buffer to the following file:
dump-path = "tests/tmp/buffers/debug_buffer"
# (Optional) Export the address of the GPU buffer as the
# following environment variable, available in `exec-before-load`
# commands (detailed below):
addr-env-name = "ASM_DBG_BUF_ADDR"
# (Optional) Export the size of the GPU buffer set above as the
# following environment variable, available in `exec-before-load`
# commands:
size-env-name = "ASM_DBG_BUF_SIZE"

[[buffer]]
size = 4096
addr-env-name = "ASM_HID_BUF_ADDR"

# An optional shell command can be executed after all
# auxiliary buffers are allocated.
# It can be used to generate replacement kernels,
# including the optional trap handler (see below).
[init-command]
# (Required) A shell command executed after buffer allocation
# and before kernel substitution
# Note that the `ASM_*` env variables are initialized
# with the buffer addresses and sizes as configured above:
exec = """bash -o pipefail -c '\
  perl tests/fixtures/breakpoint_trap.pl -ba $ASM_DBG_BUF_ADDR -bs $ASM_DBG_BUF_SIZE -ha $ASM_HID_BUF_ADDR \
      -w v[tid_dump] -e "s_nop 10" -l 41 -t 2 tests/kernels/dbg_kernel.s \
  | /opt/rocm/bin/hcc -x assembler -target amdgcn--amdhsa -mcpu=`/opt/rocm/bin/rocminfo | grep -om1 gfx9..` -mno-code-object-v3 \
    -Itests/kernels/include -o tests/tmp/replacement.co -'"""
# (Optional) Abort the application if the return code
# does not match the one specified:
required-return-code = 0

# When a `[trap-handler]` is specified, it is set up after
# the auxiliary buffer allocation.
[trap-handler]
# (Required) Path to the code object that contains the
# kernel to be set as the trap handler:
co-path = "tests/tmp/replacement.co"
# (Required) Name of the trap handler kernel:
handler-name = "trap_handler"
# (Optional) Size of the buffer to allocate and pass to
# hsaKmtSetTrapHandler, in bytes:
size = 4096
# (Optional) When the application exits, save the contents
# of the buffer to the following file:
dump-path = "tests/tmp/buffers/trap/buf"

# When the application creates an executable from a code object,
# it can be replaced. Since the application may use
# multiple code objects, each replacement is declared
# separately, beginning with `[[code-object-replace]]`.
#
# If you don't need to replace any code objects loaded by the
# application, don't specify any `[[code-object-replace]]`s.
[[code-object-replace]]
# (Required) Condition when the substitution is performed.
# In this case, the first code object loaded by the application
# will be replaced:
condition = { co-load-id = 1 }
# Alternatively, the condition can be specified as a CRC-32
# checksum that a code object should match, or a combination of both:
  # condition = { co-crc = 0xFFFFFFFF }
  # condition = { co-load-id = 1, co-crc = 0xFFFFFFFF }
# (Required) Path to the replacement code object:
co-path = "tests/tmp/replacement.co"

# Code objects contain a set of kernels. It is possible
# to replace one of them without replacing the entire
# code object. This will make `hsa_executable_symbol_get_info`
# calls return the info from a replacement code object
# for the specified symbols:
[[kernel-replace]]
# (Required) Condition when the substitution is performed,
# specified as one or several of the following predicates:
#   co-crc        - CRC-32 checksum of the code object contents
#   co-load-id    - code object load call id
#   kernel-name   - kernel name
#   kernel-get-id - hsa_executable_symbol_get_info call id
condition = { co-crc = 0xCAFE666, co-load-id = 5, kernel-name = "conv2d" }
# (Required) Name of the kernel to be used as a replacement:
replace-name = "conv2d_test_new"
# (Required) Path to the code object containing the kernel:
co-path = "replacement.co"

[[kernel-replace]]
condition = { kernel-get-id = 1 }
replace-name = "conv2d_transpose_new"
co-path = "replacement.co"
